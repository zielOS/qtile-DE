#+TITLE: Personal Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el :mkdirp yes

* Initial Setup
** Packages
*** straight.el
*** use-package
** Performance
*** Measure startup speed
*** Garbage collection
*** Run garbage collection when Emacs is unfocused
*** Measure RAM usage
** Anaconda
** Config files

* General Settings
** Keybindings
*** general.el

#+begin_src emacs-lisp :tangle yes
(use-package general
  :straight t
  :config
  (general-evil-setup))
#+end_src

*** which-key

#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :config
  (setq which-key-idle-delay 0.3)
  (setq which-key-popup-type 'frame)
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  (set-face-attribute 'which-key-local-map-description-face nil
		      :weight 'bold)
  :straight t)
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/dump-bindings-recursive (prefix &optional level buffer)
  (dolist (key (which-key--get-bindings (kbd prefix)))
    (with-current-buffer buffer
      (when level
	(insert (make-string level ? )))
      (insert (apply #'format "%s%s%s\n" key)))
    (when (string-match-p
	   (rx bos "+" (* nonl))
	   (substring-no-properties (elt key 2)))
      (my/dump-bindings-recursive
       (concat prefix " " (substring-no-properties (car key)))
       (+ 2 (or level 0))
       buffer))))

(defun my/dump-bindings (prefix)
  "Dump keybindings starting with PREFIX in a tree-like form."
  (interactive "sPrefix: ")
  (let ((buffer (get-buffer-create "bindings")))
    (with-current-buffer buffer
      (erase-buffer))
    (my/dump-bindings-recursive prefix 0 buffer)
    (with-current-buffer buffer
      (goto-char (point-min)))
    (switch-to-buffer-other-window buffer)))

#+end_src

*** Evil

#+begin_src emacs-lisp :tangle yes
(use-package evil
  :straight t
  :init
  (setq evil-want-integration t)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-keybinding nil)
  (setq evil-search-module 'evil-search)
  (setq evil-split-window-below t)
  (setq evil-vsplit-window-right t)
  (unless (display-graphic-p)
    (setq evil-want-C-i-jump nil))
  :config
  (evil-mode 1)
  ;; (setq evil-respect-visual-line-mode t)
  (evil-set-undo-system 'undo-tree))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package evil-surround
  :straight t
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package evil-commentary
  :straight t
  :after evil
  :config
  (evil-commentary-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package evil-quickscope
  :straight t
  :after evil
  :config
  :hook ((prog-mode . turn-on-evil-quickscope-mode)
	 (LaTeX-mode . turn-on-evil-quickscope-mode)
	 (org-mode . turn-on-evil-quickscope-mode)))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package evil-numbers
  :straight t
  :commands (evil-numbers/inc-at-pt evil-numbers/dec-at-pt)
  :init
  (general-nmap
    "g+" 'evil-numbers/inc-at-pt
    "g-" 'evil-numbers/dec-at-pt))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package evil-lion
  :straight t
  :config
  (setq evil-lion-left-align-key (kbd "g a"))
  (setq evil-lion-right-align-key (kbd "g A"))
  (evil-lion-mode))

#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package evil-matchit
  :straight t
  :disabled
  :config
  (global-evil-matchit-mode 1))
#+end_src

#+begin_src emacs-lisp :tangle yes


(defun my/evil-ex-search-word-forward-other-window (count &optional symbol)
  (interactive (list (prefix-numeric-value current-prefix-arg)
		     evil-symbol-word-search))
  (save-excursion
    (evil-ex-start-word-search nil 'forward count symbol))
  (other-window 1)
  (evil-ex-search-next))

(general-define-key
 :states '(normal)
 "&" #'my/evil-ex-search-word-forward-other-window)

#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init
   '(eww
     devdocs
     proced
     emms
     pass
     calendar
     dired
     ivy
     debug
     guix
     calc
     docker
     ibuffer
     geiser
     pdf
     info
     elfeed
     edebug
     bookmark
     company
     vterm
     flycheck
     profiler
     cider
     explain-pause-mode
     notmuch
     custom
     xref
     eshell
     helpful
     compile
     comint
     git-timemachine
     magit
     prodigy
     slime
     forge
     deadgrep
     vc-annonate
     telega
     doc-view)))
#+end_src

*** Avy

#+begin_src emacs-lisp :tangle yes
(use-package avy
  :straight t
  :config
  (setq avy-timeout-seconds 0.5)
  (setq avy-ignored-modes
	'(image-mode doc-view-mode pdf-view-mode exwm-mode))
  (general-define-key
   :states '(normal motion)
   "-" nil
   "--" #'avy-goto-char-2
   "-=" #'avy-goto-symbol-1))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package ace-link
  :straight t
  :commands (ace-link-info ace-link-help ace-link-woman ace-link-eww))
#+end_src

*** Personal Keybindings
**** Escape Key

#+begin_src emacs-lisp :tangle yes
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))

(defun my/escape-key ()
  (interactive)
  (evil-ex-nohighlight)
  (keyboard-quit))

(general-define-key
 :keymaps '(normal visual global)
 [escape] #'my/escape-key)

(general-define-key
 :keymaps '(minibuffer-local-map
	    minibuffer-local-ns-map
	    minibuffer-local-completion-map
	    minibuffer-local-must-match-map
	    minibuffer-local-isearch-map)
 [escape] 'minibuffer-keyboard-quit)
#+end_src

**** Home & end

#+begin_src emacs-lisp :tangle yes
(general-def :states '(normal insert visual)
  "<home>" 'beginning-of-line
  "<end>" 'end-of-line)
#+end_src

**** My leader

#+begin_src emacs-lisp :tangle yes
(general-create-definer my-leader-def
  :keymaps 'override
  :prefix "SPC"
  :states '(normal motion emacs))

(general-def :states '(normal motion emacs)
  "SPC" nil
  "M-SPC" (general-key "SPC"))

(general-def :states '(insert)
  "M-SPC" (general-key "SPC" :state 'normal))

(my-leader-def "?" 'which-key-show-top-level)
(my-leader-def "E" 'eval-expression)

(general-def :states '(insert)
  "<f1> e" #'eval-expression)

(my-leader-def
  "SPC" '(:wk "second level")
  "SPC x" '(:wk "ctl-x")
  "SPC x" ctl-x-map)
#+end_src

#+begin_src emacs-lisp :tangle yes
(my-leader-def
  "a" '(:which-key "apps"))
#+end_src

**** Universal argument

#+begin_src emacs-lisp :tangle yes
(general-def
  :keymaps 'universal-argument-map
  "M-u" 'universal-argument-more)
(general-def
  :keymaps 'override
  :states '(normal motion emacs insert visual)
  "M-u" 'universal-argument)
#+end_src

**** Profiler

#+begin_src emacs-lisp :tangle yes
(my-leader-def
  :infix "P"
  "" '(:which-key "profiler")
  "s" 'profiler-start
  "e" 'profiler-stop
  "p" 'profiler-report)
#+end_src

**** Buffer switching

#+begin_src emacs-lisp :tangle yes
(general-define-key
  :keymaps 'override
  "C-<right>" 'evil-window-right
  "C-<left>" 'evil-window-left
  "C-<up>" 'evil-window-up
  "C-<down>" 'evil-window-down
  "C-h" 'evil-window-left
  "C-l" 'evil-window-right
  "C-k" 'evil-window-up
  "C-j" 'evil-window-down
  "C-x h" 'previous-buffer
  "C-x l" 'next-buffer)

(general-define-key
 :keymaps 'evil-window-map
 "x" 'kill-buffer-and-window
 "d" 'kill-current-buffer)
#+end_src

**** winner-mode

#+begin_src emacs-lisp :tangle yes
(winner-mode 1)

(general-define-key
 :keymaps 'evil-window-map
 "u" 'winner-undo
 "U" 'winner-redo)
#+end_src

**** Buffer management

#+begin_src emacs-lisp :tangle yes
(my-leader-def
  :infix "b"
  "" '(:which-key "buffers")
  "s" '((lambda () (interactive) (switch-to-buffer (persp-scratch-buffer)))
	:which-key "*scratch*")
  "m" '((lambda () (interactive) (persp-switch-to-buffer "*Messages*"))
	:which-key "*Messages*")
  "l" 'next-buffer
  "h" 'previous-buffer
  "k" 'kill-buffer
  "b" 'persp-ivy-switch-buffer
  "r" 'revert-buffer
  "u" 'ibuffer)
#+end_src

**** xref

#+begin_src emacs-lisp :tangle yes
(general-nmap
  "gD" 'xref-find-definitions-other-window
  "gr" 'xref-find-references
  "gd" 'evil-goto-definition)

(my-leader-def
  "fx" 'xref-find-apropos)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package xref
  :straight (:type built-in))
#+end_src

**** Folding

#+begin_src emacs-lisp :tangle yes
(general-nmap :keymaps '(hs-minor-mode-map outline-minor-mode-map)
  "ze" 'hs-hide-level
  "TAB" 'evil-toggle-fold)
#+end_src

**** Zoom UI

#+begin_src emacs-lisp :tangle yes
(defun my/zoom-in ()
  "Increase font size by 10 points"
  (interactive)
  (set-face-attribute 'default nil
		      :height
		      (+ (face-attribute 'default :height) 10)))

(defun my/zoom-out ()
  "Decrease font size by 10 points"
  (interactive)
  (set-face-attribute 'default nil
		      :height
		      (- (face-attribute 'default :height) 10)))

;; change font size, interactively
(global-set-key (kbd "C-+") 'my/zoom-in)
(global-set-key (kbd "C-=") 'my/zoom-out)
#+end_src

** Editing Text
*** Indentation & whitespace
**** Aggressive indent

#+begin_src emacs-lisp :tangle yes
(use-package aggressive-indent
  :commands (aggressive-indent-mode)
  :straight t)
#+end_src

**** Delete trailing whitespace

#+begin_src emacs-lisp :tangle yes
(setq my/trailing-whitespace-modes '(markdown-mode))

(require 'cl-extra)

(add-hook 'before-save-hook
	  (lambda ()
	    (unless (cl-some #'derived-mode-p my/trailing-whitespace-modes)
	      (delete-trailing-whitespace))))
#+end_src

**** Tabs

#+begin_src emacs-lisp :tangle yes
(setq tab-always-indent nil)

(setq-default default-tab-width 4)
(setq-default tab-width 4)
(setq-default evil-indent-convert-tabs nil)
(setq-default indent-tabs-mode nil)
(setq-default evil-shift-round nil)
#+end_src

*** Settings
**** Scrolling

#+begin_src emacs-lisp :tangle yes
(setq scroll-conservatively scroll-margin)
(setq scroll-step 1)
(setq scroll-preserve-screen-position t)
(setq scroll-error-top-bottom t)
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-inhibit-click-time nil)
#+end_src

**** Clipboard

#+begin_src emacs-lisp :tangle yes
(setq select-enable-clipboard t)
(setq mouse-yank-at-point t)
#+end_src

**** Backups

#+begin_src emacs-lisp :tangle yes
(setq backup-inhibited t)
(setq auto-save-default nil)
#+end_src

*** Undo Tree

#+begin_src emacs-lisp :tangle yes
(use-package undo-tree
  :straight t
  :config
  (global-undo-tree-mode)
  (setq undo-tree-visualizer-diff t)
  (setq undo-tree-visualizer-timestamps t)
  (setq undo-tree-auto-save-history nil)

  (my-leader-def "u" 'undo-tree-visualize)
  (fset 'undo-auto-amalgamate 'ignore)
  (setq undo-limit 6710886400)
  (setq undo-strong-limit 100663296)
  (setq undo-outer-limit 1006632960))
#+end_src

*** Snippets

#+begin_src emacs-lisp :tangle yes
(use-package yasnippet-snippets
  :disabled
  :straight t)

(use-package yasnippet
  :straight t
  :config
  (setq yas-snippet-dirs
	`(,(concat (expand-file-name user-emacs-directory) "snippets")
	  ;; yasnippet-snippets-dir
	  ))
  (setq yas-triggers-in-field t)
  (yas-global-mode 1)
  (my-leader-def
    :keymaps 'yas-minor-mode-map
    :infix "es"
    "" '(:wk "yasnippet")
    "n" #'yas-new-snippet
    "s" #'yas-insert-snippet
    "v" #'yas-visit-snippet-file))

(general-imap "M-TAB" 'company-yasnippet)
#+end_src

*** Other Small packages
**** Managing parentheses

#+begin_src emacs-lisp :tangle yes
(use-package smartparens
  :straight t)
#+end_src

**** Expand region

#+begin_src emacs-lisp :tangle yes
(use-package expand-region
  :straight t
  :commands (er/expand-region)
  :init
  (general-nmap "+" 'er/expand-region))
#+end_src

**** Visual fill column mode

#+begin_src emacs-lisp :tangle yes
(use-package visual-fill-column
  :straight t
  :commands (visual-fill-column-mode)
  :config
  (add-hook 'visual-fill-column-mode-hook
	    (lambda () (setq visual-fill-column-center-text t))))
#+end_src`

** Working with projects
*** Projectile

#+begin_src emacs-lisp :tangle yes
(use-package projectile
  :straight t
  :config
  (projectile-mode +1)
  (setq projectile-project-search-path '("~/Code" "~/Documents"))
  (defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory) ad-do-it)))

(use-package counsel-projectile
  :after (counsel projectile)
  :straight t)

(my-leader-def
  "p" '(:keymap projectile-command-map :which-key "projectile"))

(general-nmap "C-p" 'counsel-projectile-find-file)
#+end_src

*** Git & Magit
**** magit

#+begin_src emacs-lisp :tangle yes
(use-package magit
  :straight t
  :commands (magit-status magit-file-dispatch)
  :init
  (my-leader-def
    "m" 'magit
    "M" 'magit-file-dispatch)
  :config
  (setq magit-blame-styles
      '((headings
	 (heading-format . "%-20a %C %s\n"))
	(highlight
	 (highlight-face . magit-blame-highlight))
	(lines
	 (show-lines . t)
	 (show-message . t)))))
#+end_src

**** forge

#+begin_src emacs-lisp :tangle yes
(use-package forge
  :after magit
  :straight t
  :config
  (add-to-list 'forge-alist '("gitlab.etu.ru"
			      "gitlab.etu.ru/api/v4"
			      "gitlab.etu.ru"
			      forge-gitlab-repository)))
#+end_src

**** git-gutter

#+begin_src emacs-lisp :tangle yes
(use-package git-gutter
  :straight t
  :if (not my/slow-ssh)
  :config
  (global-git-gutter-mode +1))
#+end_src

**** git-timemachine

#+begin_src emacs-lisp :tangle yes
(use-package git-timemachine
  :straight t
  :commands (git-timemachine))
#+end_src

*** Editorconfig

#+begin_src emacs-lisp :tangle yes
(use-package editorconfig
  :straight t
  :config
  (unless my/slow-ssh (editorconfig-mode 1))
  (add-to-list 'editorconfig-indentation-alist
	       '(emmet-mode emmet-indentation)))
#+end_src

*** Editing files

#+begin_src emacs-lisp :tangle yes
(recentf-mode 1)
(save-place-mode nil)
#+end_src

*** Deadgrep

#+begin_src emacs-lisp :tangle yes
(defun my/deadgrep-fix-buffer-advice (fun &rest args)
  (let ((buf (apply fun args)))
    (with-current-buffer buf
      (toggle-truncate-lines 1))
    buf))

(use-package deadgrep
  :straight t
  :commands (deadgrep)
  :config
  (advice-add #'deadgrep--buffer :around #'my/deadgrep-fix-buffer-advice))
#+end_src

** Completion
*** Ivy, counsel, swiper

#+begin_src emacs-lisp :tangle yes
(use-package ivy
  :straight t
  :config
  (setq ivy-use-virtual-buffers t)
  (ivy-mode))

(use-package counsel
  :straight t
  :after ivy
  :config
  (counsel-mode))

(use-package swiper
  :defer t
  :straight t)
#+end_src

*** ivy-rich

#+begin_src emacs-lisp :tangle yes
(use-package ivy-rich
  :straight t
  :after ivy
  :config
  (ivy-rich-mode 1)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+end_src

*** prescient

#+begin_src emacs-lisp :tangle yes
(use-package ivy-prescient
  :straight t
  :after counsel
  :config
  (ivy-prescient-mode +1)
  (setq ivy-prescient-retain-classic-highlighting t)
  (prescient-persist-mode 1)
  (setq ivy-prescient-sort-commands
	'(:not swiper
	       swiper-isearch
	       ivy-switch-buffer
	       ;; ivy-resume
	       ;; ivy--restore-session
	       lsp-ivy-workspace-symbol
	       dap-switch-stack-frame
	       my/dap-switch-stack-frame
	       dap-switch-session
	       dap-switch-thread
	       counsel-grep
	       ;; counsel-find-file
	       counsel-git-grep
	       counsel-rg
	       counsel-ag
	       counsel-ack
	       counsel-fzf
	       counsel-pt
	       counsel-imenu
	       counsel-yank-pop
	       counsel-recentf
	       counsel-buffer-or-recentf
	       proced-filter-interactive
	       proced-sort-interactive
	       perspective-exwm-switch-perspective
	       my/persp-ivy-switch-buffer-other-window
	       lsp-execute-code-action
	       dired-recent-open))
  ;; Do not use prescient in find-file
  (ivy--alist-set 'ivy-sort-functions-alist #'read-file-name-internal #'ivy-sort-file-function-default))

#+end_src

*** keybindings

#+begin_src emacs-lisp :tangle yes
(my-leader-def
  :infix "f"
  "" '(:which-key "various completions")'
  ;; "b" 'counsel-switch-buffer
  "b" 'persp-ivy-switch-buffer
  "e" 'conda-env-activate
  "f" 'project-find-file
  "c" 'counsel-yank-pop
  "a" 'counsel-rg
  "d" 'deadgrep
  "A" 'counsel-ag)

(general-define-key
 :states '(insert normal)
 "C-y" 'counsel-yank-pop)

(defun my/swiper-isearch ()
  (interactive)
  (if current-prefix-arg
      (swiper-all)
    (swiper-isearch)))

(my-leader-def "SPC SPC" 'ivy-resume)
(my-leader-def "s" 'my/swiper-isearch)

(general-define-key
 :keymaps '(ivy-minibuffer-map swiper-map)
 "M-j" 'ivy-next-line
 "M-k" 'ivy-previous-line
 "<C-return>" 'ivy-call
 "M-RET" 'ivy-immediate-done
 [escape] 'minibuffer-keyboard-quit)
#+end_src

*** company

#+begin_src emacs-lisp :tangle yes
(use-package company
  :straight t
  :config
  (global-company-mode)
  (setq company-idle-delay 0.125)
  (setq company-dabbrev-downcase nil)
  (setq company-show-numbers t))

(general-imap "C-SPC" 'company-complete)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package company-box
  :straight t
  :if (display-graphic-p)
  :after (company)
  :hook (company-mode . company-box-mode))
#+end_src

** Help

#+begin_src emacs-lisp :tangle yes
(use-package helpful
  :straight t
  :commands (helpful-callable
	     helpful-variable
	     helpful-key
	     helpful-macro
	     helpful-function
	     helpful-command))
#+end_src

#+begin_src emacs-lisp :tangle yes
(my-leader-def
  "h" '(:keymap help-map :which-key "help"))

(my-leader-def
  :infix "h"
  "" '(:which-key "help")
  "h" '(:keymap help-map :which-key "help-map")
  "f" 'helpful-function
  "k" 'helpful-key
  "v" 'helpful-variable
  "o" 'helpful-symbol
  "i" 'info)

(general-define-key
 :keymaps 'help-map
 "f" 'helpful-function
 "k" 'helpful-key
 "v" 'helpful-variable
 "o" 'helpful-symbol)
#+end_src

** Time trackers
*** Wakatime

#+begin_src emacs-lisp :tangle yes
(use-package wakatime-mode
  :straight (:host github :repo "SqrtMinusOne/wakatime-mode")
  :if (not (or my/remote-server))
  :config
  (setq wakatime-ignore-exit-codes '(0 1 102))
  (advice-add 'wakatime-init :after (lambda () (setq wakatime-cli-path (expand-file-name "~/bin/wakatime-cli"))))
  ;; (setq wakatime-cli-path (executable-find "wakatime"))
  (global-wakatime-mode))
#+end_src

*** ActivityWatch

#+begin_src emacs-lisp :tangle yes
(use-package request
  :straight t)

(use-package activity-watch-mode
  :straight t
  :config
  (global-activity-watch-mode))
#+end_src


* UI Settings
** General Settings
*** Miscellaneous

#+begin_src emacs-lisp :tangle yes
(setq use-dialog-box nil)
(setq inhibit-startup-screen t)
(setq visible-bell 0)
(defalias 'yes-or-no-p 'y-or-n-p)
(setq make-pointer-invisible t)
(show-paren-mode 1)
(global-hl-line-mode 1)
#+end_src

*** Line numbers

#+begin_src emacs-lisp :tangle yes
(global-display-line-numbers-mode 1)
(line-number-mode nil)
(setq display-line-numbers-type 'visual)
(column-number-mode)
#+end_src

*** Word wrapping

#+begin_src emacs-lisp :tangle yes
(setq word-wrap 1)
(global-visual-line-mode 1)
#+end_src

*** Custom frame format

#+begin_src emacs-lisp :tangle yes
(setq-default frame-title-format
	      '(""
		"emacs"
		;; (:eval
		;;  (let ((project-name (projectile-project-name)))
		;;    (if (not (string= "-" project-name))
		;;        (format ":%s@%s" project-name (system-name))
		;;      (format "@%s" (system-name)))))
		))
#+end_src

*** Olivetti

#+begin_src emacs-lisp :tangle yes
(use-package olivetti
  :straight t
  :if (display-graphic-p)
  :config
  (setq-default olivetti-body-width 86))
#+end_src

*** Keycast

#+begin_src emacs-lisp :tangle yes
(use-package keycast
  :straight t
  :config
  (define-minor-mode keycast-mode
    "Keycast mode"
    :global t
    (if keycast-mode
	(progn
	  (add-to-list 'global-mode-string '("" keycast-mode-line " "))
	  (add-hook 'pre-command-hook 'keycast--update t) )
      (remove-hook 'pre-command-hook 'keycast--update)
      (setq global-mode-string (delete '("" keycast-mode-line " ") global-mode-string)))))
#+end_src

** Themes & colors
*** Doom themes

#+begin_src emacs-lisp :tangle yes
(use-package doom-themes
  :straight t
  :config
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t)
  (load-theme 'doom-tokyonight t)
  (doom-themes-visual-bell-config)
  (setq doom-themes-treemacs-theme "doom-colors")
  (doom-themes-treemacs-config))
#+end_src

*** Dim inactive buffers

#+begin_src emacs-lisp :tangle yes
(use-package auto-dim-other-buffers
  :straight t
  :if (display-graphic-p)
  :config
  (auto-dim-other-buffers-mode t)
  (my/use-doom-colors
   (auto-dim-other-buffers-face
    :background (color-darken-name (doom-color 'bg) 3))))
#+end_src

*** Toggle light/dark

#+begin_src emacs-lisp :tangle yes
(defun my/toggle-dark-light-theme ()
  (interactive)
  (let ((is-dark (member 'doom-palenight custom-enabled-themes)))
    (if is-dark
	(progn
	  (load-theme 'doom-one-light t)
	  (disable-theme 'doom-palenight))
      (load-theme 'doom-palenight t)
      (disable-theme 'doom-one-light))))
#+end_src

*** ANSI colors

#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'ansi-color
  (my/use-doom-colors
   (ansi-color-black
    :foreground (doom-color 'base2) :background (doom-color 'base0))
   (ansi-color-red
    :foreground (doom-color 'red) :background (doom-color 'red))
   (ansi-color-green
    :foreground (doom-color 'green) :background (doom-color 'green))
   (ansi-color-yellow
    :foreground (doom-color 'yellow) :background (doom-color 'yellow))
   (ansi-color-blue
    :foreground (doom-color 'dark-blue) :background (doom-color 'dark-blue))
   (ansi-color-magenta
    :foreground (doom-color 'violet) :background (doom-color 'violet))
   (ansi-color-cyan
    :foreground (doom-color 'dark-cyan) :background (doom-color 'dark-cyan))
   (ansi-color-white
    :foreground (doom-color 'base8) :background (doom-color 'base8))
   (ansi-color-bright-black
    :foreground (doom-color 'base5) :background (doom-color 'base5))
   (ansi-color-bright-red
    :foreground (doom-color 'orange) :background (doom-color 'orange))
   (ansi-color-bright-green
    :foreground (doom-color 'teal) :background (doom-color 'teal))
   (ansi-color-bright-yellow
    :foreground (doom-color 'yellow) :background (doom-color 'yellow))
   (ansi-color-bright-blue
    :foreground (doom-color 'blue) :background (doom-color 'blue))
   (ansi-color-bright-magenta
    :foreground (doom-color 'magenta) :background (doom-color 'magenta))
   (ansi-color-bright-cyan
    :foreground (doom-color 'cyan) :background (doom-color 'cyan))
   (ansi-color-bright-white
    :foreground (doom-color 'fg) :background (doom-color 'fg))))

#+end_src

** Fonts
*** Frame font

#+begin_src emacs-lisp :tangle yes
(when (display-graphic-p)
  (if (x-list-fonts "JetBrainsMono Nerd Font")
      (set-frame-font "JetBrainsMono Nerd Font 10" nil t)
    (message "Install JetBrainsMono Nerd Font!")))
#+end_src

*** Other fonts

#+begin_src emacs-lisp :tangle yes
(when (display-graphic-p)
  (set-face-attribute 'variable-pitch nil :family "Cantarell" :height 1.0))
#+end_src

*** Ligatures

#+begin_src emacs-lisp :tangle yes
(use-package ligature
  :straight (:host github :repo "mickeynp/ligature.el")
  :if (display-graphic-p)
  :config
  (ligature-set-ligatures
   '(
     typescript-mode
     js2-mode
     vue-mode
     svelte-mode
     scss-mode
     php-mode
     python-mode
     js-mode
     markdown-mode
     clojure-mode
     go-mode
     sh-mode
     haskell-mode
     web-mode)
   '("--" "---" "==" "===" "!=" "!==" "=!=" "=:=" "=/=" "<="
     ">=" "&&" "&&&" "&=" "++" "+++" "***" ";;" "!!" "??"
     "?:" "?." "?=" "<:" ":<" ":>" ">:" "<>" "<<<" ">>>"
     "<<" ">>" "||" "-|" "_|_" "|-" "||-" "|=" "||=" "##"
     "###" "####" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:"
     "#!" "#=" "^=" "<$>" "<$" "$>" "<+>" "<+" "+>" "<*>"
     "<*" "*>" "</" "</>" "/>" "<!--" "<#--" "-->" "->" "->>"
     "<<-" "<-" "<=<" "=<<" "<<=" "<==" "<=>" "<==>" "==>" "=>"
     "=>>" ">=>" ">>=" ">>-" ">-" ">--" "-<" "-<<" ">->" "<-<"
     "<-|" "<=|" "|=>" "|->" "<->" "<~~" "<~" "<~>" "~~" "~~>"
     "~>" "~-" "-~" "~@" "[||]" "|]" "[|" "|}" "{|" "[<"
     ">]" "|>" "<|" "||>" "<||" "|||>" "<|||" "<|>" "..." ".."
     ".=" ".-" "..<" ".?" "::" ":::" ":=" "::=" ":?" ":?>"
     "//" "///" "/*" "*/" "/=" "//=" "/==" "@_" "__"))
  (global-ligature-mode t))
#+end_src

*** Icons

#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons
  :if (display-graphic-p)
  :straight t)
#+end_src

** Text highlight
*** Highlight indent guides

#+begin_src emacs-lisp :tangle yes
(use-package highlight-indent-guides
  :straight t
  :hook ((prog-mode . highlight-indent-guides-mode)
	 (LaTeX-mode . highlight-indent-guides-mode))
  :config
  (setq highlight-indent-guides-method 'bitmap)
  (setq highlight-indent-guides-bitmap-function 'highlight-indent-guides--bitmap-line))
#+end_src

*** Rainbox parentheses

#+begin_src emacs-lisp :tangle yes
(use-package rainbow-delimiters
  :straight t
  :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

*** Highlight colors

#+begin_src emacs-lisp :tangle yes
(use-package rainbow-mode
  :commands (rainbow-mode)
  :straight t)
#+end_src

*** Highlight TODOs & stuff

#+begin_src emacs-lisp :tangle yes
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode)
  :straight t)
#+end_src

** Doom Modeline

#+begin_src emacs-lisp :tangle yes
(use-package doom-modeline
  :straight t
  ;; :if (not (display-graphic-p))
  :init
  (setq doom-modeline-env-enable-python nil)
  (setq doom-modeline-env-enable-go nil)
  (setq doom-modeline-buffer-encoding 'nondefault)
  (setq doom-modeline-hud t)
  (setq doom-modeline-persp-icon nil)
  (setq doom-modeline-persp-name nil)
  (setq doom-modeline-display-misc-in-all-mode-lines nil)
  :config
  (setq doom-modeline-minor-modes nil)
  (setq doom-modeline-irc nil)
  (setq doom-modeline-buffer-state-icon nil)
  (doom-modeline-mode 1))
#+end_src

** perspective.el

#+begin_src emacs-lisp :tangle yes
(use-package perspective
  :straight t
  :init
  ;; (setq persp-show-modestring 'header)
  (setq persp-sort 'created)
  (setq persp-suppress-no-prefix-key-warning t)
  :config
  (persp-mode)
  (my-leader-def "x" '(:keymap perspective-map :which-key "perspective"))
  (general-define-key
   :keymaps 'override
   :states '(normal emacs)
   "gt" 'persp-next
   "gT" 'persp-prev
   "gn" 'persp-switch
   "gN" 'persp-kill)
  (general-define-key
   :keymaps 'perspective-map
   "b" 'persp-ivy-switch-buffer
   "x" 'persp-ivy-switch-buffer
   "u" 'persp-ibuffer))
#+end_src

*** Functions to manage buffers

#+begin_src emacs-lisp :tangle yes
(defun my/persp-move-window-and-switch ()
  (interactive)
  (let* ((buffer (current-buffer)))
    (call-interactively #'persp-switch)
    (persp-set-buffer (buffer-name buffer))
    (switch-to-buffer buffer)))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/persp-copy-window-and-switch ()
  (interactive)
  (let* ((buffer (current-buffer)))
    (call-interactively #'persp-switch)
    (persp-add-buffer (buffer-name buffer))
    (switch-to-buffer buffer)))

#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/persp-ivy-switch-buffer-other-window (arg)
  (interactive "P")
  (declare-function ivy-switch-buffer-other-window "ivy.el")
  (persp--switch-buffer-ivy-counsel-helper
   arg
   (lambda ()
     (ivy-read "Switch to buffer in other window: " #'internal-complete-buffer
	       :keymap ivy-switch-buffer-map
	       :preselect (buffer-name (other-buffer (current-buffer)))
	       :action #'ivy--switch-buffer-other-window-action
	       :matcher #'ivy--switch-buffer-matcher
	       :caller 'ivy-switch-buffer))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'perspective
  (general-define-key
   :keymaps 'perspective-map
   "m" #'my/persp-move-window-and-switch
   "f" #'my/persp-copy-window-and-switch))
#+end_src

*** Automating perspectives

#+begin_src emacs-lisp :tangle yes
(setq my/perspective-assign-alist '())
(major-mode workspace-index persp-name)
#+end_src

#+begin_src emacs-lisp :tangle yes
(defvar my/perspective-assign-ignore nil
  "If non-nil, ignore `my/perspective-assign'")

(defun my/perspective-assign ()
  (when-let* ((_ (not my/perspective-assign-ignore))
	      (rule (alist-get major-mode my/perspective-assign-alist)))
    (let ((workspace-index (car rule))
	  (persp-name (cadr rule))
	  (buffer (current-buffer)))
      (if (fboundp #'perspective-exwm-assign-window)
	  (progn
	    (perspective-exwm-assign-window
	     :workspace-index workspace-index
	     :persp-name persp-name)
	    (when workspace-index
	      (exwm-workspace-switch workspace-index))
	    (when persp-name
	      (persp-switch persp-name)))
	(with-perspective persp-name
	  (persp-set-buffer buffer))
	(persp-switch-to-buffer buffer)))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/perspective-assign-ignore-advice (fun &rest args)
  (let ((my/perspective-assign-ignore t))
    (apply fun args)))

(add-hook 'after-change-major-mode-hook #'my/perspective-assign)
#+end_src

#+begin_src emacs-lisp :tangle yes
(defmacro my/persp-add-rule (&rest body)
  (declare (indent 0))
  (unless (= (% (length body) 3) 0)
    (error "Malformed body in my/persp-add-rule"))
  (let (result)
    (while body
      (let ((major-mode (pop body))
	    (workspace-index (pop body))
	    (persp-name (pop body)))
	(push
	 `(add-to-list 'my/perspective-assign-alist
		       '(,major-mode . (,workspace-index ,persp-name)))
	 result)))
    `(progn
       ,@result)))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defmacro my/command-in-persp (command-name persp-name workspace-index &rest args)
  `'((lambda ()
       (interactive)
       (when (and ,workspace-index (fboundp #'exwm-workspace-switch-create))
	 (exwm-workspace-switch-create ,workspace-index))
       (persp-switch ,persp-name)
       (delete-other-windows)
       ,@args)
     :wk ,command-name))
#+end_src

* Programming
** General Setup
*** Treemacs
#+begin_src emacs-lisp :tangle yes
(use-package treemacs
  :straight t
  :defer t
  :config
  ;; (setq treemacs-follow-mode nil)
  ;; (setq treemacs-follow-after-init nil)
  (setq treemacs-space-between-root-nodes nil)
  ;; (treemacs-git-mode 'extended)
  ;; (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?)
  (general-define-key
   :keymaps 'treemacs-mode-map
   [mouse-1] #'treemacs-single-click-expand-action
   "M-l" #'treemacs-root-down
   "M-h" #'treemacs-root-up
   "q" #'treemacs-quit)
  (general-define-key
   :keymaps 'treemacs-mode-map
   :states '(normal emacs)
   "q" 'treemacs-quit))

(use-package treemacs-evil
  :after (treemacs evil)
  :straight t)
#+end_src

*** LSP
**** Setup
#+begin_src emacs-lisp :tangle yes
(use-package lsp-mode
  :straight t
  :if (not (or my/slow-ssh my/is-termux my/remote-server))
  :hook (
	 (typescript-mode . lsp)
	 (js-mode . lsp)
	 (vue-mode . lsp)
	 (go-mode . lsp)
	 (svelte-mode . lsp)
	 ;; (python-mode . lsp)
	 (json-mode . lsp)
	 (haskell-mode . lsp)
	 (haskell-literate-mode . lsp)
	 (java-mode . lsp)
	 ;; (csharp-mode . lsp)
	 )
  :commands lsp
  :init
  (setq lsp-keymap-prefix nil)
  :config
  (setq lsp-idle-delay 1)
  (setq lsp-eslint-server-command '("node" "/home/pavel/.emacs.d/.cache/lsp/eslint/unzipped/extension/server/out/eslintServer.js" "--stdio"))
  (setq lsp-eslint-run "onSave")
  (setq lsp-signature-render-documentation nil)
  ;; (lsp-headerline-breadcrumb-mode nil)
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-modeline-code-actions-enable nil)
  (setq lsp-modeline-diagnostics-enable nil)
  (add-to-list 'lsp-language-id-configuration '(svelte-mode . "svelte")))

(use-package lsp-ui
  :straight t
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-delay 2)
  (setq lsp-ui-sideline-show-hover nil))
#+end_src

**** Integrations

#+begin_src emacs-lisp :tangle yes
(use-package lsp-treemacs
  :after (lsp)
  :straight t
  :commands lsp-treemacs-errors-list)
#+end_src

**** Keybindings

#+begin_src emacs-lisp :tangle yes
(my-leader-def
  :infix "l"
  "" '(:which-key "lsp")
  "d" 'lsp-ui-peek-find-definitions
  "r" 'lsp-rename
  "u" 'lsp-ui-peek-find-references
  "s" 'lsp-ui-find-workspace-symbol
  "l" 'lsp-execute-code-action
  "e" 'list-flycheck-errors)
#+end_src

*** Flycheck

#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :straight t
  :config
  (global-flycheck-mode)
  (setq flycheck-check-syntax-automatically '(save idle-buffer-switch mode-enabled))
  ;; (add-hook 'evil-insert-state-exit-hook
  ;;           (lambda ()
  ;;             (if flycheck-checker
  ;;                 (flycheck-buffer))
  ;;             ))
  (advice-add 'flycheck-eslint-config-exists-p :override (lambda() t))
  (add-to-list 'display-buffer-alist
	       `(,(rx bos "*Flycheck errors*" eos)
		 (display-buffer-reuse-window
		  display-buffer-in-side-window)
		 (side            . bottom)
		 (reusable-frames . visible)
		 (window-height   . 0.33))))
#+end_src

*** Tree Sitter

#+begin_src emacs-lisp :tangle yes
(defun my/tree-sitter-if-not-mmm ()
  (when (not (and (boundp 'mmm-temp-buffer-name)
		  (string-equal mmm-temp-buffer-name (buffer-name))))
    (tree-sitter-mode)
    (tree-sitter-hl-mode)))

(use-package tree-sitter
  :straight t
  :hook ((typescript-mode . my/tree-sitter-if-not-mmm)
	 (js-mode . my/tree-sitter-if-not-mmm)
	 (python-mode . tree-sitter-mode)
	 (python-mode . tree-sitter-hl-mode)
	 (csharp-mode . tree-sitter-mode)))

(use-package tree-sitter-langs
  :straight t
  :after tree-sitter)
#+end_src

*** DAP
**** Setup

#+begin_src emacs-lisp :tangle yes
(use-package dap-mode
  :straight t
  :if (not (or my/remote-server my/is-termux))
  :commands (dap-debug)
  :init
  (setq lsp-enable-dap-auto-configure nil)
  :config

  (setq dap-ui-variable-length 100)
  (setq dap-auto-show-output nil)
  (require 'dap-node)
  (dap-node-setup)

  (require 'dap-chrome)
  (dap-chrome-setup)

  (require 'dap-python)
  (require 'dap-php)

  (dap-mode 1)
  (dap-ui-mode 1)
  (dap-tooltip-mode 1)
  (tooltip-mode 1))

#+end_src

**** Controls


#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'dap-mode
  (defmacro my/define-dap-ui-window-toggler (name)
    `(defun ,(intern (concat "my/dap-ui-toggle-" name)) ()
       ,(concat "Toggle DAP " name "buffer")
       (interactive)
       (if-let (window (get-buffer-window ,(intern (concat "dap-ui--" name "-buffer"))))
	   (quit-window nil window)
	 (,(intern (concat "dap-ui-" name))))))

  (my/define-dap-ui-window-toggler "locals")
  (my/define-dap-ui-window-toggler "expressions")
  (my/define-dap-ui-window-toggler "sessions")
  (my/define-dap-ui-window-toggler "breakpoints")
  (my/define-dap-ui-window-toggler "repl"))

#+end_src

#+begin_src emacs-lisp :tangle yes
(defhydra my/dap-hydra (:color pink :hint nil :foreign-keys run)
  "
^Stepping^         ^UI^                     ^Switch^                   ^Breakpoints^         ^Debug^                     ^Expressions
^^^^^^^^------------------------------------------------------------------------------------------------------------------------------------------
_n_: Next          _uc_: Controls           _ss_: Session              _bb_: Toggle          _dd_: Debug                 _ee_: Eval
_i_: Step in       _ue_: Expressions        _st_: Thread               _bd_: Delete          _dr_: Debug recent          _er_: Eval region
_o_: Step out      _ul_: Locals             _sf_: Stack frame          _ba_: Add             _dl_: Debug last            _es_: Eval thing at point
_c_: Continue      _ur_: REPL               _su_: Up stack frame       _bc_: Set condition   _de_: Edit debug template   _ea_: Add expression
_r_: Restart frame _uo_: Output             _sd_: Down stack frame     _bh_: Set hit count   _Q_:  Disconnect            _ed_: Remove expression
		 _us_: Sessions           _sF_: Stack frame filtered _bl_: Set log message                           _eu_: Refresh expressions
		 _ub_: Breakpoints                                                                               "

  ("n" dap-next)
  ("i" dap-step-in)
  ("o" dap-step-out)
  ("c" dap-continue)
  ("r" dap-restart-frame)
  ("uc" dap-ui-controls-mode)
  ("ue" my/dap-ui-toggle-expressions)
  ("ul" my/dap-ui-toggle-locals)
  ("ur" my/dap-ui-toggle-repl)
  ("uo" dap-go-to-output-buffer)
  ("us" my/dap-ui-toggle-sessions)
  ("ub" my/dap-ui-toggle-breakpoints)
  ("ss" dap-switch-session)
  ("st" dap-switch-thread)
  ("sf" dap-switch-stack-frame)
  ("sF" my/dap-switch-stack-frame)
  ("su" dap-up-stack-frame)
  ("sd" dap-down-stack-frame)
  ("bb" dap-breakpoint-toggle)
  ("ba" dap-breakpoint-add)
  ("bd" dap-breakpoint-delete)
  ("bc" dap-breakpoint-condition)
  ("bh" dap-breakpoint-hit-condition)
  ("bl" dap-breakpoint-log-message)
  ("dd" dap-debug)
  ("dr" dap-debug-recent)
  ("dl" dap-debug-last)
  ("de" dap-debug-edit-template)
  ("ee" dap-eval)
  ("ea" dap-ui-expressions-add)
  ("er" dap-eval-region)
  ("es" dap-eval-thing-at-point)
  ("ed" dap-ui-expressions-remove)
  ("eu" dap-ui-expressions-refresh)
  ("q" nil "quit" :color blue)
  ("Q" dap-disconnect :color red))

(my-leader-def "d" #'my/dap-hydra/body)

#+end_src

**** UI Fixes

#+begin_src emacs-lisp :tangle yes
(defvar my/dap-mode-buffer-fixed nil)

(with-eval-after-load 'dap-mode
  (defmacro my/define-dap-tree-buffer-fixer (buffer-var buffer-name)
    `(defun ,(intern (concat "my/fix-dap-ui-" buffer-name "-buffer")) (&rest _)
       (with-current-buffer ,buffer-var
	 (unless my/dap-mode-buffer-fixed
	   (toggle-truncate-lines 1)
	   (doom-modeline-set-modeline 'info)
	   (setq-local my/dap-mode-buffer-fixed t)))))

  (my/define-dap-tree-buffer-fixer dap-ui--locals-buffer "locals")
  (my/define-dap-tree-buffer-fixer dap-ui--expressions-buffer "expressions")
  (my/define-dap-tree-buffer-fixer dap-ui--sessions-buffer "sessions")
  (my/define-dap-tree-buffer-fixer dap-ui--breakpoints-buffer "breakpoints")

  (advice-add 'dap-ui-locals :after #'my/fix-dap-ui-locals-buffer)
  (advice-add 'dap-ui-expressions :after #'my/fix-dap-ui-expressions-buffer)
  (advice-add 'dap-ui-sessions :after #'my/fix-dap-ui-sessions-buffer)
  (advice-add 'dap-ui-breakpoints :after #'my/fix-dap-ui-breakpoints-buffer))
#+end_src

**** Helper functions

#+begin_src emacs-lisp :tangle yes
(defun my/clear-bad-window-parameters ()
  "Clear window parameters that interrupt my workflow."
  (interactive)
  (let ((window (get-buffer-window (current-buffer))))
    (set-window-parameter window 'no-delete-other-windows nil)))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/dap-yank-value-at-point (node)
  (interactive (list (treemacs-node-at-point)))
  (kill-new (message (plist-get (button-get node :item) :value))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/dap-display-value (node)
  (interactive (list (treemacs-node-at-point)))
  (let ((value (plist-get (button-get node :item) :value)))
    (when value
      (let ((buffer (generate-new-buffer "dap-value")))
	(with-current-buffer buffer
	  (insert value))
	(select-window (display-buffer buffer))))))
#+end_src

**** Switch to stack frame with filter

#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'dap-mode
  (setq my/dap-stack-frame-filters
	`(("node_modules,node:internal" . ,(rx (or "node_modules" "node:internal")))
	  ("node_modules" . ,(rx (or "node_modules")))
	  ("node:internal" . ,(rx (or "node:internal")))))

  (setq my/dap-stack-frame-current-filter (cdar my/dap-stack-frame-filters))

  (defun my/dap-stack-frame-filter-set ()
    (interactive)
    (setq my/dap-stack-frame-current-filter
	  (cdr
	   (assoc
	    (completing-read "Filter: " my/dap-stack-frame-filters)
	    my/dap-stack-frame-filters))))

  (defun my/dap-stack-frame-filter (frame)
    (when-let (path (dap--get-path-for-frame frame))
      (not (string-match my/dap-stack-frame-current-filter path)))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/dap-switch-stack-frame ()
  "Switch stackframe by selecting another stackframe stackframes from current thread."
  (interactive)
  (when (not (dap--cur-session))
    (error "There is no active session"))

  (-if-let (thread-id (dap--debug-session-thread-id (dap--cur-session)))
      (-if-let (stack-frames
		(gethash
		 thread-id
		 (dap--debug-session-thread-stack-frames (dap--cur-session))))
	  (let* ((index 0)
		 (stack-framces-filtered
		  (-filter
		   #'my/dap-stack-frame-filter
		   stack-frames))
		 (new-stack-frame
		  (dap--completing-read
		   "Select active frame: "
		   stack-framces-filtered
		   (-lambda ((frame &as &hash "name"))
		     (if-let (frame-path (dap--get-path-for-frame frame))
			 (format "%s: %s (in %s)"
				 (cl-incf index) name frame-path)
		       (format "%s: %s" (cl-incf index) name)))
		   nil
		   t)))
	    (dap--go-to-stack-frame (dap--cur-session) new-stack-frame))
	(->> (dap--cur-session)
	     dap--debug-session-name
	     (format "Current session %s is not stopped")
	     error))
    (error "No thread is currently active %s" (dap--debug-session-name (dap--cur-session)))))
#+end_src

**** Smarter switch to stack frame

#+begin_src emacs-lisp :tangle yes
(defun my/exwm-perspective-find-buffer (path)
  "Find a buffer with PATH in all EXWM perspectives.

Returns (<buffer> . <workspace-index>) or nil."
  (let* ((buf (cl-loop for buf being buffers
		       if (and (buffer-file-name buf)
			       (f-equal-p (buffer-file-name buf) path))
		       return buf))
	 (target-workspace
	  (and buf
	       (cl-loop for frame in exwm-workspace--list
			if (with-selected-frame frame
			     (cl-loop for persp-name being the hash-keys of (perspectives-hash)
				      if (member buf (persp-buffers
						      (gethash persp-name (perspectives-hash))))
				      return persp-name))
			return (cl-position frame exwm-workspace--list)))))
    (when target-workspace (cons buf target-workspace))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/dap--go-to-stack-frame-override (debug-session stack-frame)
  "Make STACK-FRAME the active STACK-FRAME of DEBUG-SESSION."
  (with-lsp-workspace (dap--debug-session-workspace debug-session)
    (when stack-frame
      (-let* (((&hash "line" line "column" column "name" name) stack-frame)
	      (path (dap--get-path-for-frame stack-frame)))
	(setf (dap--debug-session-active-frame debug-session) stack-frame)
	;; If we have a source file with path attached, open it and
	;; position the point in the line/column referenced in the
	;; stack trace.
	(if (and path (file-exists-p path))
	    (progn
	      (let ((exwm-target (my/exwm-perspective-find-buffer path)))
		(if exwm-target
		    (progn
		      (unless (= (cdr exwm-target) exwm-workspace-current-index)
			(exwm-workspace-switch (cdr exwm-target)))
		      (persp-switch-to-buffer (car exwm-target)))
		  (select-window (get-mru-window (selected-frame) nil))
		  (find-file path)))
	      (goto-char (point-min))
	      (forward-line (1- line))
	      (forward-char column))
	  (message "No source code for %s. Cursor at %s:%s." name line column))))
    (run-hook-with-args 'dap-stack-frame-changed-hook debug-session)))

(with-eval-after-load 'exwm
  (with-eval-after-load 'dap-mode
    (advice-add #'dap--go-to-stack-frame :override #'my/dap--go-to-stack-frame-override)))

;; (advice-remove #'dap--go-to-stack-frame #'my/dap--go-to-stack-frame-override)
#+end_src

**** Debug templates

#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'dap-mode
  (dap-register-debug-template
   "Node::Nest.js"
   (list :type "node"
	 :request "attach"
	 :name "Node::Attach"
	 :port 9229
	 :outFiles ["${workspaceFolder}/dist/**/*.js"]
	 :sourceMaps t
	 :program "${workspaceFolder}/src/app.ts"))
  (dap-register-debug-template
   "Node::Babel"
   (list :type "node"
	 :request "attach"
	 :name "Node::Attach"
	 :port 9229
	 :program "${workspaceFolder}/dist/bin/www.js")))

#+end_src

*** Reformatter

#+begin_src emacs-lisp :tangle yes
(use-package reformatter
  :straight t)
#+end_src

*** copilot

#+begin_src emacs-lisp :tangle yes
(defun my/copilot-tab ()
  (interactive)
  (or (copilot-accept-completion)
      (when (my/should-run-emmet-p) (my/emmet-or-tab))
      (when (and (eq evil-state 'normal)
		 (or hs-minor-mode outline-minor-mode))
	(evil-toggle-fold)
	t)
      (indent-for-tab-command)))

(use-package copilot
  :straight (:host github :repo "SqrtMinusOne/copilot.el" :files ("dist" "*.el"))
  :commands (copilot-mode)
  :if (not (or my/remote-server my/is-termux))
  :init
  (add-hook 'prog-mode-hook #'copilot-mode)
  :config
  (setq copilot-node-executable "/home/pavel/.conda/envs/traject/bin/node")
  (general-define-key
   :keymaps 'company-active-map
   "<backtab>" #'my/copilot-tab)
  (general-define-key
   :keymaps 'copilot-mode-map
   "<tab>" #'my/copilot-tab
   "M-j" #'copilot-accept-completion-by-line
   "M-l" #'copilot-accept-completion-by-word)
  (setq copilot-lispy-integration t))
#+end_src

*** Genral additional config

#+begin_src emacs-lisp :tangle yes
(defun my/set-smartparens-indent (mode)
  (sp-local-pair mode "{" nil :post-handlers '(("|| " "SPC") ("||\n[i]" "RET")))
  (sp-local-pair mode "[" nil :post-handlers '(("|| " "SPC") ("||\n[i]" "RET")))
  (sp-local-pair mode "(" nil :post-handlers '(("|| " "SPC") ("||\n[i]" "RET"))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/set-flycheck-eslint()
  "Override flycheck checker with eslint."
  (setq-local lsp-diagnostic-package :none)
  (setq-local flycheck-checker 'javascript-eslint))
#+end_src

** Web Development
*** Emmet
*** Prettier
*** TypeScript
*** JavaScript
*** Jest
*** web-mode
*** SCSS
*** PHP
** LaTeX
*** AUCTex

#+begin_src emacs-lisp :tangle yes
(use-package tex
  :straight auctex
  :defer t
  :config
  (setq-default TeX-auto-save t)
  (setq-default TeX-parse-self t)
  (TeX-PDF-mode)
  ;; Use XeLaTeX & stuff
  (setq-default TeX-engine 'xetex)
  (setq-default TeX-command-extra-options "-shell-escape")
  (setq-default TeX-source-correlate-method 'synctex)
  (TeX-source-correlate-mode)
  (setq-default TeX-source-correlate-start-server t)
  (setq-default LaTeX-math-menu-unicode t)

  (setq-default font-latex-fontify-sectioning 1.3)

  ;; Scale preview for my DPI
  (setq-default preview-scale-function 1.4)
  (when (boundp 'tex--prettify-symbols-alist)
    (assoc-delete-all "--" tex--prettify-symbols-alist)
    (assoc-delete-all "---" tex--prettify-symbols-alist))

  (add-hook 'LaTeX-mode-hook
	    (lambda ()
	      (TeX-fold-mode 1)
	      (outline-minor-mode)))

  (add-to-list 'TeX-view-program-selection
	       '(output-pdf "Zathura"))

  ;; Do not run lsp within templated TeX files
  (add-hook 'LaTeX-mode-hook
	    (lambda ()
	      (unless (string-match "\.hogan\.tex$" (buffer-name))
		(lsp))
	      (setq-local lsp-diagnostic-package :none)
	      (setq-local flycheck-checker 'tex-chktex)))

  (add-hook 'LaTeX-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'LaTeX-mode-hook #'smartparens-mode)
  (add-hook 'LaTeX-mode-hook #'prettify-symbols-mode)

  (my/set-smartparens-indent 'LaTeX-mode)
  (require 'smartparens-latex)

  (general-nmap
    :keymaps '(LaTeX-mode-map latex-mode-map)
    "RET" 'TeX-command-run-all
    "C-c t" 'orgtbl-mode)

  <<init-greek-latex-snippets>>
  <<init-english-latex-snippets>>
  <<init-math-latex-snippets>>
  <<init-section-latex-snippets>>)
#+end_src

*** Import *.sty

#+begin_src emacs-lisp :tangle yes
(defun my/list-sty ()
  (reverse
   (sort
    (seq-filter
     (lambda (file) (if (string-match ".*\.sty$" file) 1 nil))
     (directory-files
      (seq-some
       (lambda (dir)
	 (if (and
	      (f-directory-p dir)
	      (seq-some
	       (lambda (file) (string-match ".*\.sty$" file))
	       (directory-files dir))
	      ) dir nil))
       (list "./styles" "../styles/" "." "..")) :full))
    (lambda (f1 f2)
      (let ((f1b (file-name-base f1))
	    (f1b (file-name-base f2)))
	(cond
	 ((string-match-p ".*BibTex" f1) t)
	 ((and (string-match-p ".*Locale" f1) (not (string-match-p ".*BibTex" f2))) t)
	 ((string-match-p ".*Preamble" f2) t)
	 (t (string-lessp f1 f2))))))))

(defun my/import-sty ()
  (interactive)
  (insert
   (apply #'concat
	  (cl-mapcar
	   (lambda (file) (concat "\\usepackage{" (file-name-sans-extension (file-relative-name file default-directory)) "}\n"))
	   (my/list-sty)))))

(defun my/import-sty-org ()
  (interactive)
  (insert
   (apply #'concat
	  (cl-mapcar
	   (lambda (file) (concat "#+LATEX_HEADER: \\usepackage{" (file-name-sans-extension (file-relative-name file default-directory)) "}\n"))
	   (my/list-sty)))))
#+end_src

*** Snippets
**** Greek letters

#+begin_src emacs-lisp :tangle yes
(setq my/greek-alphabet
      '(("a" . "\\alpha")
	("b" . "\\beta" )
	("g" . "\\gamma")
	("d" . "\\delta")
	("e" . "\\epsilon")
	("z" . "\\zeta")
	("h" . "\\eta")
	("o" . "\\theta")
	("i" . "\\iota")
	("k" . "\\kappa")
	("l" . "\\lambda")
	("m" . "\\mu")
	("n" . "\\nu")
	("x" . "\\xi")
	("p" . "\\pi")
	("r" . "\\rho")
	("s" . "\\sigma")
	("t" . "\\tau")
	("u" . "\\upsilon")
	("f" . "\\phi")
	("c" . "\\chi")
	("v" . "\\psi")
	("g" . "\\omega")))

(setq my/latex-greek-prefix "'")

;; The same for capitalized letters
(dolist (elem my/greek-alphabet)
  (let ((key (car elem))
	(value (cdr elem)))
    (when (string-equal key (downcase key))
      (add-to-list 'my/greek-alphabet
		   (cons
		    (capitalize (car elem))
		    (concat
		     (substring value 0 1)
		     (capitalize (substring value 1 2))
		     (substring value 2)))))))

(yas-define-snippets
 'latex-mode
 (mapcar
  (lambda (elem)
    (list (concat my/latex-greek-prefix (car elem)) (cdr elem) (concat "Greek letter " (car elem))))
  my/greek-alphabet))
#+end_src

**** English letters

#+begin_src emacs-lisp :tangle yes
(setq my/english-alphabet
      '("a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"))

(dolist (elem my/english-alphabet)
  (when (string-equal elem (downcase elem))
    (add-to-list 'my/english-alphabet (upcase elem))))

(setq my/latex-mathbb-prefix "`")

(yas-define-snippets
 'latex-mode
 (mapcar
  (lambda (elem)
    (list (concat my/latex-mathbb-prefix elem) (concat "\\mathbb{" elem "}") (concat "Mathbb letter " elem)))
  my/english-alphabet))

#+end_src

**** Math symbols

#+begin_src emacs-lisp :tangle yes
(setq my/latex-math-symbols
      '(("x" . "\\times")
	("." . "\\cdot")
	("v" . "\\forall")
	("s" . "\\sum_{$1}^{$2}$0")
	("p" . "\\prod_{$1}^{$2}$0")
	("d" . "\\partial")
	("e" . "\\exists")
	("i" . "\\int_{$1}^{$2}$0")
	("c" . "\\cap")
	("u" . "\\cup")
	("0" . "\\emptyset")
	("^" . "\\widehat{$1}$0")
	("_" . "\\overline{$1}$0")
	("~" . "\\sim")
	("|" . "\\mid")
	("_|" . "\\perp")))

(setq my/latex-math-prefix ";")

(yas-define-snippets
 'latex-mode
 (mapcar
  (lambda (elem)
    (let ((key (car elem))
	  (value (cdr elem)))
      (list (concat my/latex-math-prefix key) value (concat "Math symbol " value))))
  my/latex-math-symbols))
#+end_src

**** Seciton snippets

#+begin_src emacs-lisp :tangle yes
(setq my/latex-section-snippets
      '(("ch" . "\\chapter{$1}")
	("sec" . "\\section{$1}")
	("ssec" . "\\subsection{$1}")
	("sssec" . "\\subsubsection{$1}")
	("par" . "\\paragraph{$1}}")))

(setq my/latex-section-snippets
      (mapcar
       (lambda (elem)
	 `(,(car elem)
	   ,(cdr elem)
	   ,(progn
	      (string-match "[a-z]+" (cdr elem))
	      (match-string 0 (cdr elem)))))
       my/latex-section-snippets))

(dolist (elem my/latex-section-snippets)
  (let* ((key (nth 0 elem))
	 (value (nth 1 elem))
	 (desc (nth 2 elem))
	 (star-index (string-match "\{\$1\}" value)))
    (add-to-list 'my/latex-section-snippets
		 `(,(concat key "*")
		   ,(concat
		     (substring value 0 star-index)
		     "*"
		     (substring value star-index))
		   ,(concat desc " with *")))
    (add-to-list 'my/latex-section-snippets
		 `(,(concat key "l")
		   ,(concat value "%\n\\label{sec:$2}")
		   ,(concat desc " with label")))))

(dolist (elem my/latex-section-snippets)
  (setf (nth 1 elem) (concat (nth 1 elem) "\n$0")))

(yas-define-snippets
 'latex-mode
 my/latex-section-snippets)
#+end_src

** Markup & natural languages
*** Markdown
*** PlantUML
*** Subtitles
*** LTex
*** LanguageTool
*** Reverso
** Lisp
*** Meta Lisp
*** Emacs Lisp
*** Common Lisp
*** Clojure
*** Hy
*** Scheme
*** CLIPS
** Python
*** ein
*** pyright
*** pipenv
*** OFF (OFF) yapf
*** black
*** isort
*** sphinx-doc
*** pytest
*** code-cells
*** tensorboard
** Data Serialization
*** JSON
*** CSV
*** YAML
** Configuration
*** .env
*** .gitignore
*** Docker
*** Jenkins
*** crontab
*** nginx
** Shell
*** sh
*** zsh
** Query languages
*** SQL
*** SPARQL
*** GraphQL
** Documents
*** DocView
** x509
** Java
** Go
** .NET
*** C#
*** MSBuild
** nix
** Lua

* Org Mode
** Installation & basic settings
*** Encryption
*** org-contrib
*** ol-notmuch
*** org-tempo
*** evil-org
** Literate programming
*** Python & Jupyter
*** Hy
*** View HTML in browser
*** PlantUML
*** Restclient
*** Setup
*** Managing Jupyter kernels
*** Output post-processing
*** Executing stuff
*** Managing a literate programming project
** Tools
*** Presentations
*** TOC
*** Screenshots
*** Transclusion
*** Drawing
*** Managing tables
** Productivity & Knowledge management
*** Org Agenda & Project Management
*** Org Journal
*** Bibliography
*** Org Roam
*** Review workflow
*** Contacts
*** Calendar view
** UI
*** OFF (OFF) Instant equations preview
*** LaTeX fragments
*** Better headers
*** Override colors
** Export
*** Hugo
*** Jupyter Notebook
*** Html export
*** LaTeX
** Keybindings & stuff
*** General keybindings
*** Copy a link
*** Navigating source blocks
*** Open a file from org-directory

* Applications
** Dired
*** Basic config & keybindings
*** Addons
*** Subdirectories
*** TRAMP
*** Bookmarks
** Shells
*** vterm
*** eshell
*** shell
** Elfeed
*** General settings
*** Some additions
*** Custom faces
*** elfeed-summary
*** elfeed-sync
*** YouTube, podcasts & EMMS
*** rdrview
*** LaTeX and pandoc
*** YouTube transcripts
*** Podcast transcripts
** Reading Documentation
*** tldr
*** man & info
*** devdocs.io
*** StackExchange
** Utilities
*** pass
*** Docker
*** Progidy
*** screenshot.el
*** proced
*** Atomic Chrome
*** Pinentry
** Productivity
*** pomm
*** hledger
*** Calendar
** Fun
*** Snow
*** Power mode
*** Redacted
*** Zone
